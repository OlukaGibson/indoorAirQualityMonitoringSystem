image:
  - file: "airqo_logo.png"
    id: airqo_logo
    type: RGB565
    transparency: alpha_channel
    resize: 80x80
  
  - file: "GoodAir.png"
    id: GoodAir
    type: RGB565
    transparency: alpha_channel
    resize: 120x120
  
  - file: "Moderate.png"
    id: Moderate
    type: RGB565
    transparency: alpha_channel
    resize: 120x120

  - file: "UnhealthySG.png"
    id: UnhealthySG
    type: RGB565
    transparency: alpha_channel
    resize: 120x120

  - file: "Unhealthy.png"
    id: Unhealthy
    type: RGB565
    transparency: alpha_channel
    resize: 120x120
  
  - file: "VeryUnhealthy.png"
    id: VeryUnhealthy
    type: RGB565
    transparency: alpha_channel
    resize: 120x120

  - file: "Hazardous.png"
    id: Hazardous
    type: RGB565
    transparency: alpha_channel
    resize: 120x120

lvgl:
  pages:
    - id: main_page
      widgets:
        # Navbar for this page
        - image:
            src: airqo_logo
            align: TOP_LEFT
            opa : 100%
            x: 35
            y: 6
    
        - obj:
            id: time_label
            x: 0
            y: 6
            width: 142
            height: 40
            align: TOP_MID
            bg_color: 0xe7eaee
            scrollbar_mode: 'OFF'
            #scroll_dir: NONE
            widgets:
              - label:
                  text: '17:17'
                  text_color: 0x000000
                  align: CENTER
                  # text_font: roboto_medium
    
        - line:
            points:
              - 0, 60
              - 795, 60
              # - 120, 10
              # - x: !lambda return random_uint32() % 100;
              #   y: !lambda return random_uint32() % 100;
              # - 230, 15
            line_width: 2
            line_color: 0x347cd7
            line_rounded: true
    
        # Room label
        - obj:
            x: 286
            y: 85
            width: 228
            height: 42
            bg_color: 0xe7eaee
            scrollbar_mode: 'OFF'
            widgets:
              - label:
                  text: 'Gibson Room'
                  text_color: 0x000000
                  align: CENTER
                  # text_font: roboto_medium
          
          
        # Left side - Air quality info
        - obj:
            x: 120
            y: 170
            width: 220
            height: 40
            bg_color: 0xf77fe4
            bg_opa : 40%
            border_color: 0xf77fe4
            border_width: 1
            clip_corner : false
            radius : 100 
            scrollbar_mode: 'OFF'
            #scroll_dir: NONE
            widgets:
              - label:
                  text: 'Hazardous'
                  text_color: 0xc847b5
                  align: CENTER
    
        - obj:
            x: 130
            y: 220
            width: 195
            height: 40
            bg_color: 0xD9D8D8
            bg_opa : 40%
            border_color: 0xD9D8D8
            border_width: 1
            clip_corner : false
            radius : 100 
            scrollbar_mode: 'OFF'
            #scroll_dir: NONE
            widgets:
              - label:
                  id: pm25_value_label
                  text: 'PM2.5: 00.00 mg/m3'
                  text_color: 0x898989
                  align: RIGHT_MID
    
        #conditional display of emoji based on PM2.5 value
        - image:
            id: air_quality_icon
            x: 45
            y: 155
            width: 120
            height: 120
            src: Hazardous

        # Hidden label for update logic
        - label:
            id: air_quality_updater
            x: 0
            y: 0
            opa: 0%  # Corrected from opacity to opa
            text: ""
    
        # CO2 area below
        - arc:
            x: 45
            y: 400
            id: co2_arc
            # value_width: 20
            # arc_width: 20
            value: 25
            min_value: 0
            max_value: 1000
            transform_angle  : 270
            width: 100  
            height: 100 
        
        - obj:
            x: 100
            y: 330
            width: 220
            height: 40
            bg_color: 0x3a84fd
            bg_opa : 40%
            border_color: 0x3a84fd
            border_width: 1
            clip_corner : false
            radius : 100 
            scrollbar_mode: 'OFF'
            #scroll_dir: NONE
            widgets:
              - label:
                  id: co2_value_label
                  text: 'CO2: 000.00 ppm'
                  text_color: 0x0049c2
                  align: CENTER
          
        # Graph area on right
        - obj:
            x: 345
            y: 175
            width: 430
            height: 260
            # bg_color: 0xFFFFFF
            # border_color: 0x000000
            border_width: 1
            scrollbar_mode: 'OFF'
            widgets:
              # Title label
              - label:
                  text: 'PM2.5 Graph'
                  text_color: 0x000000
                  align: TOP_MID
                  x: 200
                  y: 2
                  width: 430
                  height: 30
                  # text_font: roboto_medium
                  
              - line:
                  points:
                    - 5, 220
                    - 400, 220
                  line_width: 1
                  line_color: 0x000000
              
              #bar lines
              - line:
                  points:
                    - 10, 150
                    - 10, 213
                  line_width: 10
                  line_color: 0x347cd7
                  line_rounded: true
              
              - line:
                  points:
                    - 25, 200
                    - 25, 213
                  line_width: 10
                  line_color: 0x347cd7
                  line_rounded: true
              
              - line:
                  points:
                    - 40, 30
                    - 40, 213
                  line_width: 10
                  line_color: 0x347cd7
                  line_rounded: true
              
              - line:
                  points:
                    - 55, 130
                    - 55, 213
                  line_width: 10
                  line_color: 0x347cd7
                  line_rounded: true
    
              - line:
                    points:
                      - 70, 150
                      - 70, 213
                    line_width: 10
                    line_color: 0x347cd7
                    line_rounded: true
    
              - line:
                    points:
                      - 85, 150
                      - 85, 213
                    line_width: 10
                    line_color: 0x347cd7
                    line_rounded: true
              
              - line:
                    points:
                      - 100, 150
                      - 100, 213
                    line_width: 10
                    line_color: 0x347cd7
                    line_rounded: true
              
              - line:
                    points:
                      - 115, 100
                      - 115, 213
                    line_width: 10
                    line_color: 0x347cd7
                    line_rounded: true

interval:
  - interval: 500ms
    then:
      - lambda: |-
          // Get current PM2.5 value from the label text
          const char* label_text = lv_label_get_text(id(pm25_value_label));
          std::string text(label_text);
          
          // Extract numeric value from the label text
          float pm25 = 0.0;
          size_t pos = text.find("PM2.5:");
          if (pos != std::string::npos) {
            std::string value_str = text.substr(pos + 6); // Skip "PM2.5:"
            pos = value_str.find("mg/m3");
            if (pos != std::string::npos) {
              value_str = value_str.substr(0, pos);
              // Trim whitespace
              while (!value_str.empty() && isspace(value_str.front())) value_str.erase(0, 1);
              while (!value_str.empty() && isspace(value_str.back())) value_str.pop_back();
              
              // Parse the value
              char* end;
              pm25 = strtof(value_str.c_str(), &end);
              
              // Debug the extracted value
              ESP_LOGD("AirQuality", "Extracted PM2.5 value: %.2f from text: '%s'", 
                      pm25, value_str.c_str());
            }
          }
          
          // Make sure image is visible
          lv_obj_set_style_opa(id(air_quality_icon), 255, LV_PART_MAIN | LV_STATE_DEFAULT);
          lv_obj_move_foreground(id(air_quality_icon));
          
          // Find label for text update - located in the pink container at y:170
          lv_obj_t* air_quality_container = nullptr;
          lv_obj_t* air_quality_label = nullptr;
          
          // Search for the container with y=170
          lv_obj_t* obj = lv_scr_act();
          for (int i = 0; i < lv_obj_get_child_cnt(obj); i++) {
            lv_obj_t* child = lv_obj_get_child(obj, i);
            lv_coord_t y = lv_obj_get_y(child);
            if (y == 170) {
              air_quality_container = child;
              break;
            }
          }
          
          // If found container, get the label inside
          if (air_quality_container != nullptr) {
            air_quality_label = lv_obj_get_child(air_quality_container, 0);
          }
          
          // Update UI based on PM2.5 value
          const char* quality_text = "Unknown";
          uint32_t text_color = 0x000000;
          uint32_t bg_color = 0xFFFFFF;
          void* img_src = nullptr;
          
          ESP_LOGD("AirQuality", "Using PM2.5 value: %.2f", pm25);
          
          // Update image and text based on value
          if (pm25 <= 9.00) {
            quality_text = "Good";
            text_color = 0x00b016;
            bg_color = 0x68D36C;
            lv_img_set_src(id(air_quality_icon), id(GoodAir));
            ESP_LOGD("AirQuality", "Setting image to GoodAir");
          } else if (pm25 <= 55.40) {
            quality_text = "Moderate";
            text_color = 0xfcbf01;
            bg_color = 0xfec81d;
            lv_img_set_src(id(air_quality_icon), id(Moderate));
            ESP_LOGD("AirQuality", "Setting image to Moderate");
          } else if (pm25 <= 125.40) {
            quality_text = "Unhealthy for All";
            text_color = 0xe70808;
            bg_color = 0xf3624e;
            lv_img_set_src(id(air_quality_icon), id(Unhealthy));
            ESP_LOGD("AirQuality", "Setting image to Unhealthy");
          } else if (pm25 <= 225.40) {
            quality_text = "Very Unhealthy";
            text_color = 0xaa4ef3;
            bg_color = 0xc27ff7;
            lv_img_set_src(id(air_quality_icon), id(VeryUnhealthy));
            ESP_LOGD("AirQuality", "Setting image to VeryUnhealthy");
          } else {
            quality_text = "Hazardous";
            text_color = 0xe124e1;
            bg_color = 0xf77fe4; 
            lv_img_set_src(id(air_quality_icon), id(Hazardous));
            ESP_LOGD("AirQuality", "Setting image to Hazardous");
          }
          
          // Update the label text and colors if found
          if (air_quality_label != nullptr) {
            lv_label_set_text(air_quality_label, quality_text);
            lv_obj_set_style_text_color(air_quality_label, lv_color_hex(text_color), LV_PART_MAIN | LV_STATE_DEFAULT);
            
            // Update container background color
            lv_obj_set_style_bg_color(air_quality_container, lv_color_hex(bg_color), LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_border_color(air_quality_container, lv_color_hex(bg_color), LV_PART_MAIN | LV_STATE_DEFAULT);
            
            ESP_LOGD("AirQuality", "Updated UI for: %s (%.2f)", quality_text, pm25);
          }
#         points:
#           - 0, 60
#           - 795, 60
#           # - 120, 10
#           # - x: !lambda return random_uint32() % 100;
#           #   y: !lambda return random_uint32() % 100;
#           # - 230, 15
#         line_width: 2
#         line_color: 0x0000FF
#         line_rounded: true

    # - label:
    #     align: CENTER
    #     text: 'Hello World!'

# # Add image resources for logo and emoji
# image:
#   - file: "airqo_logo.png"
#     id: airqo_logo
#     type: RGB
#     transparency: alpha_channel
#     resize: 80x80
#   - file: "GoodAir.png"
#     id: GoodAir
#     type: RGB
#     transparency: alpha_channel
#     resize: 80x80

# # Add a font for the counter
# font:
#   - file: "gfonts://Roboto"
#     id: roboto_counter
#     size: 48

# # Add LVGL widgets for the counter
# lvgl:
#   widgets:
#     # Keep existing widgets
#     # - label:
#     #     align: CENTER
#     #     text: 'Hello World!'

#     #navbar for this page
#     - image:
#         id: logo_image
#         x: 10
#         y: 10
#         src: airqo_logo
#         align: TOP_LEFT
    
#     - label:
#         id: time_label
#         x: 329
#         y: 6
#         text: '17:17'
#         text_font: roboto_medium
#         width: 142
#         height: 49
#         # align: CENTER
    
#     # line at bottom of the navbar
    
#     # Add counter display
#     - label:
#         id: counter_label
#         x: 400
#         y: 150
#         text: '0'
#         text_font: roboto_counter
#         # align: CENTER
    
#     # Add button widget (without text property)
#     - button:
#         id: counter_button
#         x: 400
#         y: 220
#         # align: CENTER
#         width: 200
#         height: 80
#         on_click:
#           then:
#             - lambda: |-
#                 id(counter_value)++;
#                 // Fix: use the proper LVGL API to set text
#                 lv_label_set_text(id(counter_label), to_string(id(counter_value)).c_str());
    
#     # Add label positioned over the button (without parent property)
#     - label:
#         x: 400
#         y: 220
#         text: "COUNT +1"
#         text_font: roboto_counter
#         # align: CENTER

# # globals:
# #   - id: ui_initialized
# #     type: bool
# #     restore_value: no
# #     initial_value: 'false'
# #   - id: last_pm25_value
# #     type: float
# #     restore_value: no
# #     initial_value: '-1'
# #   - id: display_lambda
# #     type: std::function<void(display::Display &)>
# #     restore_value: no
# #     initial_value: |-
# #       [](display::Display &it) {
# #         // Draw static UI elements only once
# #         if (!id(ui_initialized)) {
# #           // Set light blue background
# #           it.fill(Color(252, 253, 254));
          
# #           // Top header bar (darker blue)
# #           it.filled_rectangle(0, 60, it.get_width(), 1, Color(0, 118, 190));
          
# #           // AirQo logo (top left)
# #           it.image(35, 6, &id(airqo_logo), COLOR_ON, COLOR_OFF);
          
# #           // Time display (center top)
# #           it.filled_rectangle(329, 6, 142, 49, Color(232, 232, 232));
# #           it.print(400, 27, &id(roboto_medium), Color::BLACK, TextAlign::CENTER, "17:17");
          
# #           // Room label
# #           it.filled_rectangle(286, 85, 228, 42, Color(232, 232, 232));
# #           it.print(400, 105, &id(roboto_medium), Color::BLACK, TextAlign::CENTER, "Room 1");
          
# #           // Left side - Air quality info
# #           // Pollutant label
# #           it.filled_rectangle(53, 170, 168, 64, Color(232, 232, 232));
# #           it.print(138, 205, &id(roboto_medium), Color::BLACK, TextAlign::RIGHT, "PM2.5 ");
          
# #           // Green emoji indicator
# #           //it.filled_circle(250, 265, 40, Color(200, 255, 200));
# #           // Emoji image
# #           it.image(216, 223, &id(GoodAir), COLOR_ON, COLOR_OFF);
          
# #           // Graph area on right
# #           it.rectangle(328, 170, 445, 270, Color::BLACK);
          
# #           // Draw grid lines
# #           for (int x = 0; x < 4; x++) {
# #             int pos_x = 328 + (x * 111);
# #             it.line(pos_x, 170, pos_x, 440, Color(200, 200, 200));
# #           }
          
# #           for (int y = 0; y < 2; y++) {
# #             int pos_y = 170 + (y * 135);
# #             it.line(328, pos_y, 773, pos_y, Color(200, 200, 200));
# #           }
          
# #           id(ui_initialized) = true;
# #         }
        
# #         // Only update the PM2.5 value display when it changes
# #         float pm25 = 123.4; // Default value
        
# #         if (id(pm25_sensor).has_state()) {
# #           pm25 = id(pm25_sensor).state;
# #         }
        
# #         // Only redraw if the value has changed
# #         if (pm25 != id(last_pm25_value)) {
# #           // Clear previous value area
# #           it.filled_rectangle(53, 240, 142, 47, Color(232, 232, 232));
          
# #           // Draw new value  μg/m³
# #           char value_str[16];
# #           sprintf(value_str, "%.1f mg/m3", pm25);
# #           it.print(170, 265, &id(roboto_small), Color::BLACK, TextAlign::RIGHT, value_str);
          
# #           // Store last value
# #           id(last_pm25_value) = pm25;
# #         }
# #       }